Задание 7
Ответить на вопросы:
Требования - это что?
Для чего нужен Анализ требований в разработке программного обеспечения?
Перечислите Виды требований
Перечислите Функциональные уровни требований
Перечислите Нефункциональные уровни требований
Перечислите техники сбора требований
Что такое Спецификация требований программного обеспечения (SRS)?
Что такое Use Case?
Приведите пример Use Case
Перечислите Характеристики качества требований
Приведите пример к каждой Характеристике качества требований
Что такое Пользовательские истории(User story)?
Приведите пример Пользовательских историй(User story)
Какие преимущества и недостатки Пользовательских историй(User story)?
Что такое Критерии приемки(Acceptance criteria)?
Перечислите виды и форматы критерий приемки
Приведите пример критерий приемки- список правил
Приведите пример критерий приемки- поведенческий сценарий
Перечислите критерии INVEST для User story


User story\Use Case\ тест сценарий
==================================================================================



Требования – это утвержденные условия, которые должны быть выполнены для достижения определенной цели. В контексте тестирования ПО, требования могут быть функциональными (описывающие функции и возможности ПО) и нефункциональными (такими как производительность, безопасность и надежность).

Требования (requirements)				
				
				
"Требования - это спецификация (описание) того, что должно быть реализовано.

Требования описывают то, что необходимо реализовать, без детализации технической стороны решения. “Что”, а не “как”.			
				 
В требованиях указываются свойства, качества и особенности разрабатываемой программы


	Свойства качественных требований
● Завершенность (completeness). Требование является полным и законченным с точкизрения представления в нем всей необходимой информации, ничто не пропущено посоображениям «это и так всем понятно»
● Атомарность, единичность (atomicity). Требование является атомарным, если его нельзя разбить на отдельные требования без потери завершенности и оно описывает одну и только одну ситуацию. 
● Непротиворечивость, последовательность (consistency). Требование не должно содержать внутренних противоречий и противоречий другим требованиям и документам
● Недвусмысленность (unambiguousness, clearness). Требование должно быть описано без использования жаргона, неочевидных аббревиатур и расплывчатых формулировок, должно допускать только однозначное объективное понимание и быть атомарным в плане невозможности различной трактовки сочетания отдельных
фраз.
● Выполнимость (feasibility). Требование должно быть технологически выполнимым и
реализуемым в рамках бюджета и сроков разработки проекта
● Обязательность, нужность (obligatoriness) и актуальность (up-to-date). Если требование не является обязательным к реализации, оно должно быть просто исключено из набора требований
● Прослеживаемость (traceability)
● Модифицируемость (modifiability). Это свойство характеризует простоту внесения изменений в отдельные требования и в набор требований.
● Проранжированность по важности, стабильности, срочности (ranked for importance, stability, priority)
● Корректность (correctness) и проверяемость (verifiability)



	Требования
●   Требование (requirement) — описание того, какие функции и с соблюдением каких
условий должно выполнять приложение в процессе решения полезной для
пользователя задачи.
●   Требование (requirement): Условия или возможности, необходимые пользователю для
решения определенных задач или достижения определенных целей, которые должны
быть достигнуты для выполнения контракта, стандартов, спецификации, или других
формальных документов. 
(IEEE 610)
●   Спецификация (specification): Документ, описывающий (в идеале - исчерпывающе,
однозначно и доступно) требования, дизайн, поведение или иные характеристики
компонента или системы. Зачастую в спецификацию включаются процедуры
контроля исполнения. 
(ISTQB)
●   Спецификация компонента (component specification): Описание функций компонента в
терминах его выходных значений для заданных входных значений при определенных
условиях, а также требуемого нефункционального поведения (например,
использование ресурсов). 
(ISTQB)
●   Спецификация проектирования теста (test design specification): Документ,
описывающий тестовое условие (элементы покрытия) для элемента тестирования,
детализированный подход к тестированию, и идентифицирующий соответствующие
тестовые сценарии высокого уровня. 
(IEEE 829)
●   Спецификация процедуры тестирования (test procedure specification): Документ,
описывающий последовательность действий при выполнении теста. Также известен
как ручной сценарий тестирования. 
(IEEE 829)
●   Спецификация теста (test specification): Документ, состоящий из спецификации
проектирования теста, спецификации тестовых сценариев и/или спецификации
процедуры тестирования.
●   Спецификация тестовых сценариев (test case specification): Документ, описывающий
комплект тестовых сценариев - цель, входы, тестовые операции, ожидаемые
результаты и предусловия выполнения для объекта тестирования. (IEEE 829)

	техники выявления требований
● Интервью. Самый универсальный путь выявления требований,
заключающийся в общении проектного специалиста (как правило,бизнес-аналитика) и представителя 
заказчика (или эксперта, пользователя и т.д.). 
● Работа с фокусными группами. Может выступать как вариант «расширенного интервью», где источником информации является не одно лицо, а группа лиц(как правило, представляющих собой целевую аудиторию, и/или обладающихважной для проекта информацией, и/или уполномоченных принимать важные 
для проекта решения).
● Анкетирование. при неверной реализации может привести к нулевому результату при объемных затратах. В то же время при правильной организации анкетирование позволяет автоматически собрать и обработать огромноеколичество ответов от огромного количества респондентов. 
● Семинары и мозговой штурм. Семинары позволяют группе людей оченьбыстро обменяться информацией. Мозговой штурм может проводиться и как часть семинара, и как отдельный вид деятельности.
● Наблюдение. Может выражаться как в буквальном наблюдении за некимипроцессами, так и во включении проектного специалиста в эти процессы в качестве участника. 
● Прототипирование. Состоит в демонстрации и обсуждении промежуточных версий продукта (например, дизайн страниц сайта может быть сначала представлен в виде картинок, и лишь затем сверстан).
● Анализ документов. Хорошо работает тогда, когда эксперты в предметной области (временно) недоступны, а также в предметных областях, имеющих общепринятую устоявшуюся регламентирующую документацию. 
● Моделирование процессов и взаимодействий. Может применяться как к
«бизнес-процессам и взаимодействиям», так и к «техническим процессам и взаимодействиям» .
● Самостоятельное описание. Является не столько техникой выявления
требований, сколько техникой их фиксации и формализации. Очень сложно (и
даже нельзя!) пытаться самому «придумать требования за заказчика»

	уровни и типы требований
● Бизнес-требования (business requirements) выражают цель, ради которой разрабатывается продукт
● Пользовательские требования (user requirements) описывают задачи, которые
пользователь может выполнять с помощью разрабатываемой системы
● Бизнес-правила (business rules) описывают особенности принятых в предметной области (и/или непосредственно у заказчика) процессов, ограничений и иных правил
● Атрибуты качества (quality attributes) расширяют собой нефункциональные требования и на уровне пользовательских требований могут быть представлены в виде описания ключевых для проекта показателей качества
● Функциональные требования (functional requirements) описывают поведение системы, т.е. ее действия (вычисления, преобразования, проверки, обработку и т.д.)
● Нефункциональные требования (non-functional requirements) описывают свойства системы (удобство использования, безопасность, надежность, расширяемость и т.д.), которыми она должна обладать при реализации своего поведения
● Ограничения (limitations, constraints) представляют собой факторы, ограничивающие выбор способов и средств (в том числе инструментов) реализации продукта.
● Требования к интерфейсам (external interfaces requirements) описывают особенности взаимодействия разрабатываемой системы с другими системами и операционной средой
● Требования к данным (data requirements) описывают структуры данных (и сами данные), являющиеся неотъемлемой частью разрабатываемой системы
	


	Источники требований
● Международное, федеральное, муниципальное, ведомственное отраслевое
законодательство (конституция, законы и подзаконные акты, распоряжения,
ГОСТы);
● Нормативное обеспечение организации (регламенты, положения, уставы,
приказы);
● Текущая организация деятельности объекта автоматизации;
● Модели деятельности (диаграммы бизнес-процессов);
● Представления и ожидания потребителей и пользователей системы;
● Журналы использования существующих программно-аппаратных систем;
● Технологические возможности конечного пользователя;
● Конкурирующие программные продукты


	Виды документов требований
● Спецификация требований к программному обеспечению (SRS - Software Requirement Specification):
● Спецификация бизнес-требований (BRS - Business Requirement Specification): 
● Спецификация функциональных требований (FRS - Functional Requirement Specification):
● Документ бизнес-требований (BRD - Business Requirements Document, Business NeedsvSpecification, Business Requirements):
● Документ требований рынка (MRD - Market Requirements Document)
● Документ требований к продукту (PRD - Product Requirements Document) 
● Функциональная спецификация (FSD - Functional Specifications Document)
● Спецификация продукта (PSD - Product Specifications Document)
● Спецификация функционального дизайна (FDS - Functional Design Specification);
● Спецификация технического дизайна (TDS - Technical Design Specification);
				
				



Что такое SRS
Software requirements specification — один из самых важных документов в разработке программного обеспечения. Он описывает работу ПО, его функции и нагрузки. Проще говоря, SRS предоставляет всем участникам дорожную карту для проекта.

Спецификация требований программного обеспечения описывает функциональные и нефункциональные требования. Часто в документ включают варианты использования, которые иллюстрируют, как пользователь будет взаимодействовать с системой.

Преимущества SRS
Software requirements specification является основой проекта. Документ закладывает базу, которой будут следовать все участники команды разработки.
Спецификации требований к программному обеспечению — это способ более четкой коммуникации. Этот инструмент помогает быть уверенным в том, что все участники процесса правильно понимают друг друга.
Написание SRS также может минимизировать общее время и затраты на разработку. Команды разработчиков встроенных систем особенно выигрывают от использования SRS.
Такая документация помогает избежать дальнейших улучшений и изменений в проекте, которые задерживают завершение или приводят к дополнительным расходам.






Use case (в переводе с англ. «вариант использования») — это часть такого документа. Он описывает, какие действия выполняет пользователь и как система должна на них реагировать. Пример простейшего use case: пользователь заполнил поля формы, а система должна сохранить введённые данные.




Критерии приемки (acceptance criteria): Критерии выхода, которым должны соответствовать компонент или система, для того, чтобы быть принятыми пользователем, заказчиком или другим уполномоченным лицом. (IEEE 610)
Критерии приемки - это условия, которым должен удовлетворять программный продукт, чтобы быть принятым пользователем, заказчиком или, в случае функциональности системного уровня, потребляющей системой. Проще говоря - это список деталей (также известных как требования) о том, как новая функция (feature) программного обеспечения должна работать / выглядеть.



Формат / макет / шаблон критериев приемки (Acceptance Criteria Format/Layout/Template): существует два основных типа критериев приемки, основанные на сценариях и правилах:
Критерии приемлемости, основанные на сценариях (Scenario-based acceptance criteria), используют шаблон для подробного описания конкретного поведения / последовательности действий пользователя;
Критерии приемлемости на основе правил (Rule-based acceptance criteria) - это скорее простой список того, как функция должна выглядеть / работать;
Scenario-based acceptance criteria соответствует формату “Дано/Когда/Тогда” (“Given/When/Then”) (основан на BDD - behavior driven development):
Given /какой-то аспект, связанный с поведением пользователя/
When /пользователь выполняет определенное действие/
Then /происходит определенный результат/
Между ними в случае нескольких условий можно добавлять “И” (“AND”).
Rule-Based Acceptance Criteria - это простой список «правил» о том, как функция должна выглядеть / работать:
Все кнопки должны быть определенного цвета;
Кнопка входа должна перенаправлять пользователя в определенный раздел;
Кнопка регистрации должна находиться в определенной области;
Все кнопки должны быть серыми, если не выполняются определенные требования;
и многое другое;




Хорошие User Story соответствуют критериям INVEST
INVEST — критерии хорошей истории:
Independent — независимая от других историй, то есть истории могут быть реализованы в любом порядке
Negotiable — обсуждаемая, отражает суть, а не детали; не содержит конкретных шагов реализации
Valuable — ценная для клиентов, бизнеса и стейкхолдеров
Estimable — оцениваемая по сложности и трудозатратам
Small — компактная, может быть сделана командой за одну итерацию
Testable — тестируемая (например, имеет критерии приемки)



