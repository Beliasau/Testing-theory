Задание 2
Ответить на вопросы:
1. что такое проект?
2. Из каких этапов состоит Waterfall model/Каскадная модель?
3. Какие преимущества и недостатки Waterfall model/Каскадной модели?
4. Из каких этапов состоит V-model/V- модель?
5. Когда использовать V-model/V- модель?
6. Из каких этапов состоит Iterative model/Итеративная модель?
7. Когда использовать Iterative model/Итеративной модели?
8. Плюсы и минусы Iterative model/Итеративной модели?
9. Agile - это?
10. Agile манифест - это?
11. Какие ценности Agile манифест?
12. Основные принципы Agile манифест?
13. Scrum - это?
14. Преимущества и недостатки Scrum
15. Kanban- это?
16. Преимущества и недостатки Kanban?


==============================================================


1. что такое проект?
проект — это краткосрочное усилие по созданию уникального продукта, сервиса или среды, например, замещение старых сервисов новыми, разработка коммерческого сайта, создание новых видов настольных компьютеров или слияние баз данных.



2. Из каких этапов состоит Waterfall model/Каскадная модель?

Этапы каскадной модели разработки ПО
Планирование (Planning) На этом этапе разрабатывается детальный план проекта. ...
Анализ требований (Requirements Analysis) ...
Проектирование и дизайн (Design) ...
Разработка (Development) ...
Тестирование и интеграция (Testing & Deployment) ...
Поддержка (Support)



3. Какие преимущества и недостатки Waterfall model/Каскадной модели?

Недостатки Waterfall
Этапы работы выполняются строго поочередно — их нельзя менять местами. Если команда следует Waterfall, то она не может вернуться назад и внести корректировки на ходу — ей придется мириться с допущенными ошибками до конца шестой фазы и лишь затем планировать исправления

Преимущества каскадной модели
модель хорошо известна потребителям;
она упорядочение справляется со сложностями и хорошо срабатывает для тех проектов, которые достаточно понятны, но все же трудно разрешимы;
она весьма доступна для понимани




4. Из каких этапов состоит V-model

 на каждом этапе жизненного цикла разработки приложения есть своя соответствующая фаза тестирования.

Анализ, составление требований к продукту.
Планирование.
Проектирование и дизайн.
Разработка.


5. Когда использовать V-model/V- модель?

В проектах, в которых существуют временные и финансовые ограничения; – Для задач, которые предполагают более широкое, по сравнению с каскадной моделью, тестовое покрытие.
Тестирование здесь появляется уже на самых ранних стадиях развития проекта, что позволяет минимизировать риски, а также обнаружить и устранить множество потенциальных проблем до того, как они станут проблемами реальными.



6. Из каких этапов состоит Iterative model/Итеративная модель?

Итерационная инкрементальная модель (iterative model, incremental model)
• с точки зрения жизненного цикла модель является итерационной, т.к. подразумевает многократное повторение одних и тех же стадий;
• с точки зрения развития продукта (приращения его полезных функций) модель является инкрементальной.
Ключевой особенностью данной модели является разбиение проекта на относительно небольшие промежутки (итерации), каждый из которых в общем случае может включать в себя все классические стадии, присущие водопадной и v-образной моделям . Итогом итерации является приращение (инкремент) функциональности продукта, выраженное в промежуточном билде.
к основным недостаткам этой модели часто относят высокие накладные расходы, вызванные высокой «бюрократизированностью» и общей громоздкостью модели





7. Когда использовать Iterative model/Итеративной модели?

Итеративная разработка отлично подходит для больших проектов, для проектов с неопределенными требованиями и для программных продуктов, которые носят инновационный характер и основаны на бизнес‑гипотезах, требующих проверки. 
Использование подобной модели удобно для крупных проектов, стартапов, которые спешат выйти на рынок и будут привлекать клиентов



8. Плюсы и минусы Iterative model/Итеративной модели?
Преимущества итеративного подхода:

снижение воздействия серьёзных рисков на ранних стадиях проекта, что ведет к минимизации затрат на их устранение;
организация эффективной обратной связи проектной команды с потребителем (а также заказчиками, стейкхолдерами) и создание продукта, реально отвечающего его потребностям;
акцент усилий на наиболее важные и критичные направления проекта;
непрерывное итеративное тестирование, позволяющее оценить успешность всего проекта в целом;
раннее обнаружение конфликтов между требованиями, моделями и реализацией проекта;
более равномерная загрузка участников проекта;
эффективное использование накопленного опыта;
реальная оценка текущего состояния проекта и, как следствие, большая уверенность заказчиков и непосредственных участников в его успешном завершении;
затраты распределяются по всему проекту, а не группируются в его конце

Минусы итеративной модели разработки:

Отсутствие понятных сразу бюджета и сроков разработки;
Исходную архитектуру продукта, возможно, придется несколько раз существенно перерабатывать, чтобы обеспечить выпуск следующих итераций;
Нередко приходится в значительной мере переписывать решения, уже сделанные в предыдущих итерациях – например, для обеспечения масштабирования баз данных или выравнивания нагрузки на сервер.



9. Agile - это?
	Гибкая модель (методология) (agile model) 
представляет собой совокупность различных подходов к разработке ПО и базируется на т.н.«agile-манифесте»:
• Люди и взаимодействие важнее процессов и инструментов.
• Работающий продукт важнее исчерпывающей документации.
• Сотрудничество с заказчиком важнее согласования условий контракта.
• Готовность к изменениям важнее следования первоначальному плану.


как правило, для гибкого подхода Agile характерна работа короткими итерациями по две-три недели. Внутри каждой итерации собрана серия задач: анализ, проектирование, непосредственно работа и тестирование. После каждой итерации команда анализирует результаты и меняет приоритеты для следующего цикла.




12. Основные принципы Agile манифест?

1 Удовлетворение клиентов — приоритетная задача при разработке продукта. Клиенты должны своевременно и в полном объёме получать качественное программное обеспечение и его обновления.
2 Изменения в процессе разработки приветствуются. Гибкие процессы позволяют наделить продукт конкурентными преимуществами для клиентов.
3 Рабочее ПО нужно доставлять клиенту часто, в рамках 2–16 недель.
4 Руководители и разработчики должны трудиться вместе на протяжении всего рабочего процесса.
5 В основе проекта — мотивированные люди. Обеспечьте им необходимые условия работы, поддержку и доверие.
6 Лучший способ передачи информации в команде — личная беседа.
7 Основное мерило прогресса — работающее ПО. А не часы, трудозатраты и другие критерии.
8 Гибкие процессы — основа устойчивого развития. Они позволяют поддерживать нужный рабочий темп как на спринтерской, так и на марафонской дистанции.
9 Важно уделять внимание техническому совершенству и качественному дизайну продукта.
10 Важно сокращать до минимума лишнюю работу и не переусложнять проект и рабочие процессы.
11 Самые лучшие продукты рождаются у самоорганизующихся команд. Нет микроменеджменту, да — свободе управления.
12 Команда должна регулярно оценивать работу и корректировать своё поведение.




13. Scrum - это?

Scrum — это методика гибкого управления проектами, помогающая командам структурировать работу и управлять ею на основе определенного набора ценностей, принципов и практик. 
Scrum

основные понятия
бэклог
список задач по проекту
есть бэклог всего проекта и бэклог спринта

спринт
итерация (цикл) разработки
промежуток времени в который прогнозируется выполнения задач проекта из бэклога (от 1 до 4 недель)

график сгорания задач(Burndown chart)
отчет о проведении тестирования в спринте



14. Преимущества и недостатки Scrum


5 плюсов Scrum
Ориентация на клиента и потребности бизнеса. Постоянное улучшение продукта, увеличение его ценности для пользователей.
Адаптивность, возможность быстро вносить изменения, гибко реагируя на изменения на рынке или другие важные обстоятельства. Не слепо следовать плану и расписанию, а уметь приоритезировать задачи, в зависимости от потребностей клиентов.
Прост в понимании и освоении, поэтому так популярен. Руководство занимает всего 17 страниц, одна из которых содержание. Ссылка в конце статьи.
Получение быстрых результатов, частые поставки изменений продукта, что позволяет доставлять ценность клиенту без промедления.
Практически не требует менеджерской работы, для настройки процессов есть скрам-мастер. команда самоорганизована и кроссфункциональна. Важно мнение каждого члена команды.

5 минусов Scrum
Недостаточно проработанная документация, не всегда хватает на это времени. Если на проекте важно скрупулезное ведение документации, то нужно сразу вводить для этого соответствующую роль.
Нужна активная вовлеченность клиента в процесс разработки, без нее — снижение эффективности. Клиент обеспечивает своевременное формирование и приоритезация продукт-бэклога.
Не всегда подходит для крупных проектов и компаний из-за ограничения по ведению документации и затруднения коммуникации между командами. Для крупных проектов лучше подойдет SAF.
Опасность навешивания на скрам-мастера менеджерских функций “по старинке”, скрам-мастер фасилитирует процессы, а не распределяет задачи.
До скрама нужно дорасти, команда должна иметь определенную степень зрелости и сработанности (гибкий ум, мотивированность, взаимное уважение, работа на результат), ведь качество работы каждого члена влияет на производительность команды.



15. Kanban- это?


Kanban 

Kanban - визуальная доска 
доска на которой, например есть колонкb TO DO. In Progress. Done 
пепремещая задачу из колонки в колонку просматривается весь процесс разработки
желательно чтобы в колонке  In Progress было минимальное количество задач


Kanban и Scrum это фреймворки (методологии) использующие принципы и ценности Agile-manifesto

 Скрам – это фреймворк с жесткими правилами и границами. Вы можете использовать разные инструменты и методологии внутри Скрама, но если вы отказались от чего-то обязательного в Скраме, он уже не может считаться Скрамом. Канбан – это метод, инструмент с набором практик и принципов. Вы можете использовать все практики, часть практик или не использовать их вообще. В Канбане нет строгого понятия, что есть Канбан, а что не есть Канбан. Однако, разумное использование практик может существенно помочь вам сделать сервис максимально качественным и соответствующим ожиданиям клиентов




16. Преимущества и недостатки Kanban?

Плюсы Канбан-метода:

1. Визуализация работы. Использование доски Канбан позволяет командам легко видеть, какие задачи находятся в процессе выполнения

 2. Гибкость. Канбан — это гибкий метод, который не предписывает определенный набор практик или ролей.

 3. Ориентация на непрерывную постановку задач. Ориентация Канбан на непрерывное предоставление ценности означает, что команды могут работать над задачами по мере их поступления, а не ждать начала определенного спринта. 

4. Улучшенное сотрудничество. Использование визуальной доски и фокус на ограничении незавершенной работы может помочь командам более эффективно сотрудничать. Команды могут видеть, над какими задачами работают их коллеги, а это помогает сократить дублирование усилий и повысить общую эффективность.

 
 

Минусы Канбан:

1. Отсутствие структуры. Хотя гибкость Канбан может быть сильной стороной, она может быть и слабой стороной. Командам может быть трудно работать эффективно без определенного набора практик и ролей, что может привести к путанице и неэффективности.

2. Отсутствие временных рамок. Канбан не устанавливает конкретную продолжительность времени для работы

3. Ограниченное количество ретроспектив спринта. Одним из ключевых преимуществ Scrum является ретроспектива спринта, которая позволяет командам проанализировать свою работу и определить области для улучшения. В Kanban нет аналогичного процесса, и это может затруднить командам постоянное совершенствование рабочих процессов.

4. Отсутствие расстановки приоритетов. Канбан не устанавливает конкретные приоритеты для работы, и это может затруднить для команд определение того, какая работа должна быть выполнена в первую очередь. Командам может быть трудно определить, какая работа является наиболее важной, что может привести к задержкам и отсутствию прогресса.