Задание 5
Ответить на вопросы:
Что такое Тест план?
Что должен описывать тест план?
Какие вы знаете Виды тест планов?
Что такое Чек лист?
Перечислите возможные атрибуты Чек листа
Перечислите варианты статусов при прохождении Чек листа
Что такое Тест кейс?
Перечислите атрибуты Тест кейса?
Перечислите виды Тест кейсов?
Что такое Тестовый набор (Test Suite)?
Что такое Баг репорт?
Какое нужно соблюдать правило в баг репорте для хорошего Summary?
Перечислите атрибуты Баг репорта?
Опишите Жизненный цикл бага
Что такое Priority?
Перечислите классификации Priority
Что такое Severity?
Перечислите классификации  Severity
Приведите пример Низкого Priority и Высокого Severity
Приведите пример Низкого Severity и Высокого Priority
Что такое Матрица соответствия требований (Requirements Traceability Matrix)?
Что такое Тест-отчет?
По времени Тест отчет на сколько типов возможно разделить?
Что должен показывать Промежуточный отчет?
Что должен показывать Итоговый отчет?



=======================================================================================


 Тест план.  Тест-стратегия				
				
			
"Тест план (Test Plan) — это документ, который описывает весь объем работ по тестированию, начиная с описания 
объекта, стратегии, расписания, критериев начала и окончания тестирования, до необходимого в процессе работы 
оборудования, специальных знаний, а также оценки рисков."				
				
Отвечает на вопросы:				
Что?				
Когда?				
Критерии начала/окончания тестирования.				
Окружение (environment) dev/staging/production?				
Подходы/техники/инструменты/виды тестирования?				
Браузеры/версии/OS/разрешения экрана?				
Кто? Обязанности? Ресурсы? Обучение?				
Сроки?				
График?				
Стратегия тестирования.				
Ссылки на документацию.				
Ссылки на требования.				
				
Основные пункты тест плана:				
				
Идентификатор тест плана (Test plan identifier);				
Введение (Introduction);				
Объект тестирования (Test items);				
Функции, которые будут протестированы (Features to be tested;)				
Функции, которые не будут протестированы (Features not to be tested);				
Тестовые подходы (Approach);				
Критерии прохождения тестирования (Item pass/fail criteria);				
Критерии приостановления и возобновления тестирования (Suspension criteria and resumption requirements);				
Результаты тестирования (Test deliverables);				
Задачи тестирования (Testing tasks);				
Ресурсы системы (Environmental needs);				
Обязанности (Responsibilities);				
Роли и ответственность (Staffing and training needs);				
Расписание (Schedule);				
Оценка рисков (Risks and contingencies);				
Согласования (Approvals).				
				
				

Виды тест планов
Мастер тест план (Master Plan or Master Test Plan)
Тест план (Test Plan), назовем его детальный тест план
План приемочных испытаний (Product Acceptance Plan) — документ, описывающий набор действий, связанных с приемочным тестированием (стратегия, дата проведения, ответственные работники и т. д.)


				
тестовая стратегия				
может быть отдельным документом либо же частью тест-плана				
							
кто составляет				
менеджер				
тестировщик(уровня Middle+)				
				
что включает?				
цель тестирования				
(для чего будет использоваться конретный вид тестирования, чтобы добится результата)				
информация о продукте				
виды тестирования				
критерии начала и окончания тестирования				
				
Test strategy. A high-level description of the test levels to be performed and the testing within				
those levels (group of test activities that are organized and managed together, e.g. component test,				
integration test, system test and acceptance test) for an organi￾zation or program (one or more projects)				
[ISTQB Glossary]				
перевод(Стратегия тестирования. Высокоуровневое описание уровней тестирования, которые необходимо выполнить, и тестирования в рамках
этих уровней (группа тестовых действий, которые организованы и управляются совместно, например, тестирование компонентов,
интеграционное тестирование, системное тестирование и приемочное тестирование) для организации или программы (одного или нескольких проектов).	)			





				
Check list				
				
— это документ, описывающий, что должно быть протестировано.				
Чек-лист может быть абсолютно разного уровня детализации.				
Как правило, чек-лист содержит только действия (шаги) без ожидаемого результата.				
Чек-лист менее формализован чем тест кейс.				
Чек-лист намного легче поддерживать, чем тест кейсы.				
Пункты чек листа отвечают на вопрос “что тестировать?”, а конкретные шаги и детали “как тестировать?” описывают в тест кейсах.				

АТРИБУТЫ ЧЕК-ЛИСТА				
версия сборки (билда)				
окружение на котором проводилось тестирование				
дата проведения теста				
тестировщик который проводил тестирование				
тип тестов				
названия тестов				
результат тестов				
может содержаться уникальный ID теста				
чек-лист используется на не сложных проектах и не продолжительных по времени				
				


Какие статусы есть у тест-кейсов?
«Passed». Статус означает, что ПО проверено и удовлетворило ожидания. ...
«Failed». Поведение тестируемой системы не отвечает ожидаемым результатам, обнаружен дефект. ...
«Blocked». Говорит о невозможности выполнения тестирования, т. ...
«Skipped». ...
«Draft». ...
«In progress».



Test Case (тестовый случай).	тестовый набор (test suite)		 				
				
				
Test Case				
				
— это тестовый артефакт/документ, описывающий совокупность шагов, конкретных условий и параметров, необходимых для проверки тестируемой функции.				
— это описание проверки работы системы, которое может выполнить любой человек из команды.				
— это описание проверки системы на соответствие требованиям.				
				
Тест кейс состоит из:				
ID (идентификатор)				
Title (название)				
Type (тип)				
Priority (приоритет)				
Preconditions (предусловия)				
Steps (шаги)				
Expected Result (ожидаемый результат)				
Post conditions (пост условия) - например очистка данных или возвращение системы в первоначальное состояние.				
Тест кейсы разделяются на позитивные и негативные:				
Позитивный тест кейс использует только корректные данные и проверяет, что приложение правильно выполнило вызываемую функцию.				
Негативный тест кейс оперирует как корректными, так и некорректными данными (минимум 1 некорректный параметр) и ставит целью проверку исключительных ситуаций (срабатывание валидаторов), а также проверяет, что вызываемая системой функция не выполняется при срабатывании валидатора.				
				
Тест-кейс — это последовательность шагов, которые приводят к какому-то результату.				
пошаговый сценарий, в котором описываем как мы будем тестировать

тестовые кейсы могут собираться в тестовые наборы(test suite)				
тест кейс используется на более сложных проектах, где нужна детализация,				
и на более долгих проектах, если велика вероятность прихода новых специалистов, если часто меняется				
команда, с течением времени, на проекте также исп. тест кейс				
тест кейсы очень сложно поддерживать, по этому их используют на проектах где требования				
не меняются часто				
				

Тест кейс,виды
функционального тестирования;
приемочного тестирования;
нагрузочного или стресс-тестирования;
исследовательского тестирования;
smoke-тестирования и др.


			тестовый набор (test suite)
набор тесткейсов, в котором выполнение тесткейса может быть предусловием для выполнения следующего.
кейсы идут друг за другом по порядку



Bug report (баг репорт) 				
				
				
Bug Report				
"— это документ, описывающий последовательность действий, которые привели к 
некорректной работе системы, с указанием причин и ожидаемого результата."				
Дефект (bug) — отклонение фактического результата от ожидаемого.				
Отчёт о дефекте (bug report) — документ, который содержит отчет о любом недостатке в				
компоненте или системе, который потенциально может привести компонент или систему к				
невозможности выполнить требуемую функцию.				
					
Основные составляющие Bug report:				
ID (идентификатор)				
Название (Title)				
Короткое описание (Summary)				
Проект (Project)				
Компонент приложения (Component)				
Номер версии (Version)				
Серьезность (Severity)				
Приоритет (Priority)				
Статус (Status)				
Автор (Author)				
Назначен на (Assignee)				
Окружение (Environment: dev/test/staging/prod/etc.)				
App/build version (версия билда/приложения)				
Шаги воспроизведения (Steps to Reproduce)				
Фактический Результат (Actual Result)				
Ожидаемый результат (Expected Result)
Вложения (Attachments) — скриншоты, видео или лог-файлы.				
				
Дополнительные составляющие Bug report:				
Screenshots (скриншоты)				
Video (видео)				
Credentials (login + password)				
Browser console errors (логи с браузера)				
Mobile app logs (логи с мобилки)				
Server logs (логи с сервера)				
API Requests (апи запросы)				
Analytics events (ивенты с аналитики)				
Database data (данные из базы данных)				
Database queries (запросы в базу)				
Date and time (дата и время)				
Comments/Notes (комментарии/заметки)				
Link tasks/bugs (подвязка других задач/багов к текущему)				
HAR archive - архив со всеми запросами в Network		



Жизненный цикл бага 				
				
создан 
назначен на
приоритезирован
взят на работу
исправлен
ретест
если исправлен то закрыт, если не исправлен то опять назначен на кого либо 				
				


Severity vs Priority				
				
				
"Серьезность (Severity)
— это атрибут, характеризующий влияние дефекта на работоспособность приложения.

В теории Severity выставляется тестировщиком.
Градация Severity:
S1 Блокирующая (Blocker)
S2 Критическая (Critical)
S3 Значительная (Major)
S4 Незначительная (Minor)
S5 Тривиальная (Trivial)

Приоритет (Priority)
— это атрибут, указывающий на очередность выполнения задачи или устранения дефекта.
Чем выше приоритет, тем быстрее нужно исправить дефект.
В теории Priority выставляется менеджером, тимлидом или заказчиком.
Градация Priority:
P1 Высокий (High)
P2 Средний (Medium)
P3 Низкий (Low)
Реальность: на разных проектах разные градации.
"				




Traceability matrix (Матрица соответствия требований)				
				
Traceability matrix - это двумерная таблица, содержащая соответствие функциональных требований и тест кейсов.				
В заголовках колонок таблицы расположены требования, а в заголовках строк — ID тест кейсов.				
На пересечении — отметка, означающая, что требование текущей колонки покрыто тестовым сценарием текущей строки.				
				
На пересечении соответствующих строки и столбца ставится отметка, обозначающая, что данное требование покрывается данным тест-кейсом.
Таким образом, таблица дает визуальное отображение двух параметров:
	•наличие в системе требований, которые еще не покрыты (если у требования нет ни одного 		пересечения с тест-кейсами (достаточное условие);
	•есть ли в системе избыточное тестирование — если требования имеет несколько пересечений 		(необходимое условие).

чаще используется расширенная матрица троссировки, где в шапке таблицы указывается:
	Epic ID
	Feature ID
	User Story ID
	User Story Name
	Test Case Prority
	Test Case ID
	Test Case Name
	Test Case Status
	Smoke\Regres
	Estimation(hours)
	Autotest
	Iteration
	Notes
на основании ее можно выбирать определенные метрики





Отчёт — это документ, содержащий информацию о выполненных действиях, результатах проведённой работы. Обычно он включает в себя таблицы, графики, списки, просто описывающую информацию в виде текста. Их пропорция и содержание определяют пользу и понятность отчета.
Нам важно понять, для кого, для чего и в каких условиях мы это делаем и на сколько это улучшит восприятие излагаемой нами информации.




ЧТО НУЖНО УКАЗЫВАТЬ В ОТЧЕТЕ ВСЕГДА?


Может показаться, что отчеты разных типов сильно отличаются.

Тем не менее, в них есть схожие черты и данные, которые стоит указывать всегда.
Вот они:
1. Состав команды;
2. Сроки выполнения, за которые составляется отчет;
3. Описание процессов тестирования;
4. Изменения тестовой модели, дополнение ТК;
5. Процент пройденных ТК;
6. Критичные и блокирующие проблемы и принятые меры по их устранению;
7. Результаты регресса (плюс акцент на сохранившихся проблемах);
8. План на следующую итерацию\ неделю\ месяц;

Пункты 3, 4, 6 и 8 стоит писать с оглядкой на целевую аудиторию отчета.
Седьмой пункт стоит указывать тогда, когда проводилось «регресс-тестирование». Обычно этот пункт фигурирует в «версионных» отчетах.


Отчёты могут делиться на два вида относительно времени:

1. (Недельный, дневной, месячный)/ промежуточный.
В общем, это практически тот же финальный отчет, но с измененными приоритетами фокуса и уменьшенной глубиной временной выборки. В нем обязательно должны содержаться две главных метрики:
— Оценка степени готовности продукта.
— Оценка проведённых работ по тестированию за время между отчетностями (прогресс).

Этот отчет должен показать какова динамика вашей работы.

Важно помнить, что прогресс – величина не постоянная, а динамическая, она определяется за счёт сравнения состояния проекта на прошлой неделе и настоящей. Соответственно прогресс – этот совокупность метрик, позволяющих понять в каком состоянии находится проект.
Они создаются для каждого проекта индивидуально, основываясь на целях, которые ставятся для успешного проведения тестирования. Метрики ставятся при создании ТК (тест-кейсов), прохождении ТК (провален\пройден), обнаружении дефектов (критичность). Они позволяют доступно и достаточно быстро составить общую сравнительную картину по проекту. Если вы, например, используете TestLink, то понимаете, что метрики позволяют делать быструю выборку по проблемам, составлять статистику проваленных ТК и т. п.
Данная информация полезна и необходима для Product Manager, её составляют и контролируют Test-manager, а также QE и SQE.
Есть еще один важный и часто используемые тип временного отчета – версионный (отчет по итерации).
Он схож с итоговым. В нём описываются те задачи, которые были выполнены командой тестирования для конкретной версии продукта.

2. Конечный /финальный.
В финальном отчете важно показать общий взгляд на проделанную работу (в контексте установленных метрик) и эволюцию продукта.
Так же, надо дать исчерпывающую информацию о статусе продукта в данный момент (количество оставшихся неисправленных ошибок, полностью ли протестирован продукт или требуется дополнительный цикл тестирования, оценка возможности выпуска продукта во «внешний мир» и т.д).