Задание 3
Ответить на вопросы:
Что такое функциональное тестирование (Functional/Behavioral testing)?
Что такое нефункциональное тестирование (Non-Functional testing)?
Какие виды тестирования относятся к функциональному тестированию?
Какие виды тестирования относятся к нефункциональному тестированию?
Что такое Статическое/Динамическое тестирование?
Что такое Черный/Серый/Белый ящик тестирования(White/Black/Grey Box testing)?
Что такое Компонентное(Component or Unit Testing) /Интеграционное (Integration Testing)
/Системное (System Testing)/Приемочное тестирования (Acceptance Testing)?
Что такое Позитивное/Негативное тестирование?
Что такое Альфа (Alpha Testing)/Бета тестирование(Beta Testing)?
Что такое Интуитивное/Исследовательское тестирование?
Что такое Дымовые (Smoke)/Ре-тест (Re-test)/ Санити (Sanity)/Регрессионное (Regression) тестирование?
Что такое Тестирование нового функционала/ Приемочное тестирование?
Что такое Ручное/Автоматизированное/Полуавтоматизированное тестирование?
На основании чего происходит разработка тестовых сценариев?
Что такое Frontend / Backend?
Что такое тестирование безопасности?
Перечислите Принципы безопасности программного обеспечения
Перечислите виды уязвимостей в безопасности программного обеспечения
Что такое Тестирование на отказ и восстановления Failover and Recovery Testing?
Что такое тестирование Эффективности использования ресурсов?
Что такое тестирование Масштабируемости (Scalability testing)?
Что такое тестирование Производительности (Performance testing)?
Что такое тестирование Надежности(Reliability Testing)?
Что такое тестирование Стабильности (Stability Testing)?
Что такое тестирование Удобства использования(Usability testing)?
Что такое тестирование Локализации// Совместимости/ Адаптивности?





=====================================================================



Виды / типы тестирования (Testing types)\(функциональное и нефункциональное)			
				
				
				
18.1. Функциональные виды тестирования				
Функциональное тестирование (Functional testing)				
Тестирование пользовательского интерфейса (GUI Testing)				
Тестирование безопасности (Security and Access Control Testing)				
Тестирование взаимодействия (Interoperability Testing)	

Функциональное
Функциональное тестирование (functional testing) — вид тестирования, направленный на проверку 
корректности работы функциональности приложения (корректность реализации функциональных требований). 
Часто функциональное тестирование ассоциируют с тестированием по методу чёрного ящика, однако и по 
методу белого ящика вполне можно проверять корректность реализации функциональности
функциональное тестирование направлено на проверку того, какие функции приложения реализованы, 
и что они работают верным образом
Functional testing. Testing based on an analysis of the specification of the functionality of a 
component or system. [ISTQB Glossary]





			ВАЖНО!!

ФУНКЦИОНАЛЬНОЕ ТЕСТИРОВАНИЕ, В ОСНОВНОМ ЭТО ТЕСТИРОВАНИЕ ФУНКЦИЙ ПРОГРАММЫ(ФУНКЦИЙ КОДА), Т.Е
ТЕСТИРОВАНИЕ ТОГО ЧТО НАПИСАЛ ПРОГРАММИСТ .
Т.О К ФУНКЦИОНАЛЬНОМУ ТЕСТИРОВАНИЮ МОЖНО ОТНЕСТИ И БОЛЬШИНСТВО НЕФУНКЦИОНАЛЬНОГО ТЕСТИРОВАНИЯ!!!
НА ПРАКТИКЕ ЭТО ЗАВИСИТ ОТ ПРОЕКТА И КОМАНДЫ В КОТРОЙ РАБОТАЕШЬ!
НАПРИМЕР:
В ОДНОЙ ФИРМЕ ФУНКЦИОНАЛЬНОЕ ТЕСТИРОВАНИЕ - ТЕСТИРОВАНИЕ ФРОНТА
НЕФУНКЦИОНАЛЬНОЕ Т-ИЕ - ТЕСТИРОВАНИЕ БЭКЕНДА

ТЕСТИРОВАНИЕ ВОСТАНОВЛЕНИЯ. ВОССТАНОВЛЕНИЕ ПРОПИСАНО ПРОГРАМНО РАЗРАБОТЧИКАМИ, 
ЗНАЧИТ ЭТО ТЕСТИРОВАНИЕ МОЖНО ОТНЕСТИ К ФУНКЦИОНАЛЬНОМУ, А ВОТ ВРЕМЯ ЗА КОТОРОЕ ВОССТАНОВИЛОСЬ ПО,
И УДОВЛЕТВОРЯЕТ ЛИ ЭТО ВРЕМЯ КОНЕЧНОГО ПОЛЬЗОВАТЕЛЯ УЖЕ МОЖНО ОТНЕСТИ К НЕФУНКЦИОНАЛЬНОМУ

ТЕСТИРОВАНИЕ ЛОКАЛИЗАЦИИ. ЛОКАЛИЗАЦИЯ ПРОПИСАНА ПРОГРАМНО (СКРИПТ ПОДТЯГИВАЕТ НУЖНЫЕ СЛОВА ПРИ 
ВЫБОРЕ ДРУГОГО ЯЗЫКА ИЗ БД)- В ЭТОМ СЛУЧАЕ ЭТО ФУНКЦИОНАЛЬНОЕ ТЕСТИРОВАНИЕ, А ВОТ ПРАВИЛЬНОСТЬ ПЕРЕВОДА
И ОРФОГРФИЧЕСКИЕ ОШИБКИ ЭТО УЖЕ НЕФУНКЦИОНАЛЬНОЕ ТЕСТИРОВАНИЕ
				






18.2. Нефункциональные виды тестирования				

Все виды тестирования производительности (Performance):	
Нагрузочное тестирование (Load Testing) много пользователей.	
Стрессовое тестирование (Stress Testing)
Объемное тестирование (Volume Testing) много данных.	
Тестирование восстановления (Recovery Testing)
Тестирование отказоустойчивости (Failover Testing)
Тестирование эффективности (Efficiency Testing)
Тестирование аварийного восстановления (Disaster Recovery Testing)
Тестирование установки (Installation Testing)
Тестирование документации (Documentation Testing)
Тестирование на удобство использования (Usability Testing)
Тестирование графического интерфейса пользователя (User Interface Testing)
Тестирование совместимости (Compatibility Testing)
Тестирование обслуживаемости (Maintainability Testing)
Тестирование безопасности (Security Testing)
Тестирование масштабируемости (Scalability Testing)
Тестирование выносливости (Endurance Testing)
Тестирование надежности (Reliability Testing)
Тестирование соответствия (Compliance Testing)
Тестирование локализации (Localization Testing)
Тестирование интернационализации (Internationalization Testing)
Тестирование переносимости (Portability Testing)
Тестирование на основе базового уровня (Baseline Testing)
Конфигурационное тестирование (Configuration Testing)	
				
			
				
		НЕ Функциональное
Нефункциональное тестирование (non-functional testing) — вид тестирования, направленный на проверку 
нефункциональных особенностей приложения (корректность реализации нефункциональных требований), таких 
как удобство использования, совместимость, производительность, безопасность и т.д
Non-functional testing. Testing the attributes of a component or system that do not relate to functionality, e.g. reliability, efficiency, 
usability, maintainability and portability. [ISTQB Glossary]

тестирование удобства использования (usability testing) — тестирование, направленное на исследование 
того, насколько конечному пользователю понятно, как работать с продуктом (understandability, 
learnability, op￾erability), а также на то, насколько ему нравится использовать продукт(attractiveness). 
Usability. The capability of the software to be understood, learned, used and attractive to the user 
when used under specified conditions. 
[ISTQB Glossary]
Understandability. The capability of the software product to enable the user to understand whether 
the software is suitable, and how it can be used for particular tasks and conditions of use. 
[ISTQB Glossary]
Learnability. The capability of the software product to enable the user to learn its application. 
[ISTQB Glossary]
Operability. The capability of the software product to enable the user to operate and control it. 
[ISTQB Glossary]
Attractiveness. The capability of the software product to be attractive to the user. 
[ISTQB Glossary]

тестирование безопасности (security testing) — тестирование, направленное на проверку способности 
приложения противостоять злонамеренным попыткам получения доступа к данным или функциям, 
права на доступ к которым у злоумышленника нет
Security testing. Testing to determine the security of the software product. 
[ISTQB Glossary]

тестирование установки (Инсталляционное тестирование) (installation testing, installability testing) —
тестирование, направленное на выявление дефектов, влияющих на протекание стадии инсталляции (установки) 
приложения. В общем случае такое тестирование проверяет множество сценариев и аспектов работы инсталля-
тора в таких ситуациях, как:
  новая среда исполнения, в которой приложение ранее не было инсталлировано;
  обновление существующей версии («апгрейд»);
  изменение текущей версии на более старую («даунгрейд»);
  повторная установка приложения с целью устранения возникших проблем («переинсталляция»);
  повторный запуск инсталляции после ошибки, приведшей к невозможности продолжения инсталляции;
  удаление приложения;
  установка нового приложения из семейства приложений;
  автоматическая инсталляция без участия пользователя.
Installability testing. The process of testing the installability of a software product. Installability
is the capability of the software product to be installed in a specified environment. 
[ISTQB Glossary]

тестирование доступности (accessibility testing) — тестирование, направленное на исследование 
пригодности продукта к использованию людьми с ограниченными возможностями (слабым зрением и т.д.).
Accessibility testing. Testing to determine the ease by which users with disabilities can use a 
component or system. [ISTQB Glossary]

Тестирование интернационализации (internationalization testing, i18n test￾ing, globalization testing, 
localizability testing) — тестирование, направленное на проверку готовности продукта к работе 
с использованием различных языков и с учётом различных национальных и культурных особенностей.
Этот вид тестирования не подразумевает проверки качества соответствующей адаптации 
(этим занимается тестирование локализации, см. следующий пункт), оно сфокусировано именно на проверке 
возможности такой адаптации (например: что будет, если открыть файл с иероглифом в имени; как бу-
дет работать интерфейс, если всё перевести на японский; может ли приложение искать данные в тексте 
на корейском и т.д.)

тестирование локализации (localization testing, l10n) — тестирование, направленное на проверку 
корректности и качества адаптации продукта к использованию на том или ином языке с учётом национальных 
и культурных особенностей. Это тестирование следует за тестированием интернационализации 
(см. предыдущий пункт) и проверяет корректность перевода и адаптации продукта, 
а не готовность продукта к таким действиям.

тестирование данных и баз данных(data quality testing (database integ￾rity testing) 
— два близких по смыслу вида тестирования, направленных на исследование таких характеристик данных, 
как полнота, непротиворечивость, целостность, структурированность и т.д. В контексте баз 
данных исследованию может подвергаться адекватность модели предметной области, 
способность модели обеспечивать целостность и консистентность данных, корректность работы триггеров, 
хранимых процедур и т.д
Data quality. An attribute of data that indicates correctness with respect to some pre-defined 
criteria, e.g., business expectations, requirements on data integrity, data consistency. 
[ISTQB Glossary]
Database integrity testing. Testing the methods and processes used to access and manage the data(base), 
to ensure access methods, processes and data rules function as expected and that during access to the 
database, data is not corrupted or unex￾pectedly deleted, updated or created. 
[ISTQB Glossary]

тестирование отказоустойчивости (failover testing) — тестирование, заключающееся в эмуляции или 
реальном создании критических ситуаций с целью проверки способности приложения задействовать 
соответствующие механизмы, предотвращающие нарушение работоспособности, производительности и 
повреждения данных
Failover Testing. Testing by simulating failure modes or actually causing failures in a controlled 
environment. Following a failure, the failover mechanism is tested to ensure that data is not lost 
or corrupted and that any agreed service levels are maintained (e.g., function availability or 
response times). [ISTQB Glossary]

тестирование восстанавливаемости и (recoverability testing) — тестирование способности приложения 
восстанавливать свои функции и заданный уровень производительности, а также восстанавливать данные 
в случае возникновения критической ситуации, приводящей к временной (частичной) утрате работоспособности приложения.
Recoverability Testing. The process of testing to determine the recoverability of a software product 
(the capability of the software product to re-establish a specified level of performance and recover 
the data directly affected in case of failure). [ISTQB Glossary]	

Тестирование надёжности (reliability testing) — тестирование способности приложения выполнять 
свои функции в заданных условиях на протяжении заданного времени или заданного количества операций.

тестирование использования ресурсов (resource utilization testing, effi￾ciency testing, storage testing) 
— совокупность видов тестирования, проверяющих эффективность использования приложением доступных 
ему ресурсов и зависимость результатов работы приложения от количества доступных ему ресурсов. 
Часто эти виды тестирования прямо или косвенно примыкают к техникам тестирования производительности
Resource utilization testing, Storage testing. The process of testing to determine the 
resource-utilization of a software product. 
[ISTQB Glossary]
Efficiency testing. The process of testing to determine the efficiency of a software product 
(the capability of a process to produce the intended outcome, relative to the amount of resources used).
[ISTQB Glossary]

тестирование производительности (performance testing) — исследование показателей скорости реакции 
приложения на внешние воздействия при различной по характеру и интенсивности нагрузке.
Performance Testing. The process of testing to determine the performance of a software product. 
[ISTQB Glossary]
В рамках тестирования производительности выделяют следующие подвиды
	нагрузочное (load testing, capacity testing) — исследование способности приложения сохранять 
	заданные показатели качества при нагрузке в допустимых пределах и некотором превышении 
	этих пределов (определение «запаса прочности»)
	Load Testing. A type of performance testing conducted to evaluate the behavior of a component 
	or system with increasing load, e.g. numbers of parallel users and/or numbers of transactions, 
	to determine what load can be handled by the component or system. [ISTQB Glossary]

	масштабируемости (scalability testing) — исследование способности приложения увеличивать 
	показатели производительности в соответствии с увеличением количества доступных приложению 
	ресурсов
	Scalability Testing. Testing to determine the scalability of the software product 
	(the capability of the software product to be upgraded to accommodate increased loads). 
	[ISTQB Glossary]

	стресс тестирование (stress testing) — исследование поведения приложения при нештатных 
	изменениях нагрузки, значительно превышающих расчётный уровень, или в ситуациях недоступности 
	значительной части необходимых приложению ресурсов. Стрессовое тестирование может выполняться 
	и вне контекста нагрузочного тестирования: тогда оно, как правило, называется 
	«тестированием на разрушение» (destructive testing) и представляет собой крайнюю форму 
	негативного тестирования
	Stress testing. A type of performance testing conducted to evaluate a system or component 
	at or beyond the limits of its antici￾pated or specified workloads, or with reduced 
	availability of resources such as access to memory or servers. [ISTQB Glossary]

	тест стабильности
	обьемное е (volume testing) — исследование производительности приложения при обработке 
	различных (как правило, больших) объёмов данных.
	Volume Testing. Testing where the system is subjected to large volumes of data. [ISTQB Glossary]

	конкурентное (concurrency testing) — исследование поведения приложения в ситуации, когда ему 
	приходится обрабатывать большое количество одновременно поступающих запросов, что вызывает 
	конкуренцию между запросами за ресурсы (базу данных, память, канал передачи данных, 
	дисковую подсистему и т.д.). Иногда под конкурентным тестированием понимают также 
	исследование работы многопоточных приложений и корректность синхронизации действий, 
	производимых в разных потоках.
	Concurrency testing. Testing to determine how the occurrence of two or more activities within 
	the same interval of time, achieved either by interleaving the activities or by simultaneous 
	execution, is handled by the component or system. [ISTQB Glossary]



тестирование совместимости (compatibility testing, interoperability testing)
— тестирование, направленное на проверку способности приложения работать в указанном окружении. 
	кроссплатформенное тестирование(конфигурационное тестирование), 
	(configura￾tion testing)Совместимость с аппаратной платформой, операционной системой и 
	сетевой инфраструктурой 
	Configuration Testing, Portability Testing. The process of testing to determine the 
	portability of a software product (the ease with which the software product can be transferred 
	from one hardware or software environment to another). 
	[ISTQB Glossary]

	кросс-браузерное тестирование, (cross-browser testing)
	Совместимость с браузерами и их версиями




ВЕРИФИКАЦИЯ				
статическая практика проверки документов дизайна, архитектуры, и тд, проходит без запуска кода				
верификация всегда происходит до валидации				
делаем ли мы продукт правильно? соответствует ли продукт внутренним требованиям (документации)?				
				
ВАЛИДАЦИЯ				
динамический процесс оценки конечного продукта, когда необходимо проверить соответствует ли ПО				
ожиданиям клиента				
всегда после верификации				
делаем ли мы правильный продукт?создается ли продукт правильно с точки зрения ожиданий клиента?				
				
				
Например, лекарство прошло все положенные испытания и поступило в продажу. Значит ли это что оно может				
быть применено каким-то конкретным больным? Нет, т. к. каждый пациент имеет свои особенности и конкретно				
для этого лекарство может быть губительным, т.е. кто–то (врач) должен подтвердить: да, этому больному				
можно принимать это лекарство. То есть врач должен выполнить валидацию: придать законную силу				
конкретному применению.				
				
пример. Предприятие выпускает трубы, предназначенные для закладки в землю, в соответствии с				
некоторыми ТУ (Техническими условиями). Продукция этим ТУ соответствует, но поступил заказ,				
предполагающий укладку труб по дну моря. Могут ли трубы, соответствующие имеющимся ТУ,				
быть применены в данном случае? Именно валидация и дает ответ на этот вопрос.	





Тестирование методом «черного ящика» - это стратегия, в которой тестирование основано исключительно на требованиях и спецификациях, при этом мы не знаем, как устроена внутри тестируемая система и работаем исключительно с внешними интерфейсами тестируемой системы или компонента. Тестирование черного ящика может быть применено на всех уровнях - модульном, интеграционном, системном и приемочном.


Тестирование методом белого ящика (white-box testing): Тестирование, основанное на анализе внутренней структуры компонента или системы (ISTQB).
Тестирование белого ящика - это покрытие требований в коде:


Тестирования методом серого ящика вообще нет в ISTQB, тем не менее много где можно встретить упоминания этого типа тестирования. В целом оно определяется как метод тестирования ПО, который предполагает комбинацию White Box и Black Box подходов или как дополненный черный ящик. Т.е., внутреннее устройство/код известны/используется лишь частично, и, например, имея доступ к внутренней структуре и алгоритмам работы ПО, можно написать более эффективные тест-кейсы, но само тестирование проводится с помощью техники черного ящика, то есть, с позиции пользователя.
Примеры: тестирование с проверкой корректности записей в БД; работа с логами и метриками для поиска root cause проблем.



1. Модульное тестирование (Unit Testing)				
Тестирование кода классов, функций, модулей в коде. Обычно выполняется программистами.				
компонентное(модульное)(unit) (unit testing, module testing, com￾ponent testing) направлено на 
проверку отдельных небольших частей приложения, которые (как правило) можно исследовать 
изолированно от других подобных частей. 
Module testing, Unit testing, Component testing. The testing of individual software components. 
[ISTQB Glossary]


2. Интеграционное тестирование (Integration Testing)				
Тестирование взаимодействия между несколькими классами, функциями, модулями. Например тестирование API через Postman.				
интеграционное  (integration testing, component integration testing, pairwise integration testing, 
system integration testing, incremental testing, interface testing, thread testing) 
направлено на проверку взаимодействия между несколькими частями приложения 
(каждая из которых, в свою очередь, проверена отдельно на стадии модульного тестирования)
Integration testing. Testing performed to expose defects in the interfaces and in the interactions 
between integrated components or systems. [ISTQB Glossary]
	компонентное интеграционное тестирование
	системное интеграционное тестирование (API,CLI,GUI)(Тестирование интерфейса) 
	(interface testing) — тестирование, направленное на проверку интерфейсов приложения или 
	его компонентов. По опреде-лению ISTQB-глоссария этот вид тестирования относится к интеграционному 
	тестированию, и это вполне справедливо для таких его вариаций как (API testing) и 
	(CLI testing), и тестирование непосредственно интерфейса пользователя (GUI testing)
	Interface Testing. An integration test type that is concerned with testing the interfaces 
	between components or systems. [ISTQB Glossary]
	API testing. Testing performed by submitting commands to the software under test using 
	programming interfaces of the applica￾tion directly. [ISTQB Glossary]
	CLI testing. Testing performed by submitting commands to the software under test using 
	a dedicated command-line interface.[ISTQB Glossary]
	GUI testing. Testing performed by interacting with the software under test via the graphical 
	user interface. [ISTQB Glossary]

				
3. Системное тестирование (System Testing)				
Проверка как функциональных, так и нефункциональных требований к системе.				

системное  (system testing) направлено на проверку всего приложения как единого целого, 
собранного из частей, проверенных на двух предыдущих стадиях. Здесь не только выявляются дефекты 
«на стыках» компонентов, но и появляется возможность полноценно взаимодействовать с приложением с 
точки зрения конечного пользователя, применяя множество других видов тестирования
System testing. The process of testing an integrated system to verify that it meets specified 
requirements. [ISTQB Glossary]



4. Приемочное тестирование (Acceptance Testing)				
Проверка соответствия системы требованиям и проводится с целью:				
определения удовлетворяет ли система приемочным критериям;				
вынесения решения заказчиком/менеджером принимается приложение или нет.				
приемочное
Приёмочное тестирование (User Acceptance Testing (UAT))(acceptance testing) — формализованное 
тестирование, направленное на проверку приложения с точки зрения конечного пользователя/заказчика и 
вынесения решения о том, принимает ли заказчик работу у исполнителя (проектной команды)
Acceptance Testing. Formal testing with respect to user needs, requirements, and business processes 
conducted to determine whether or not a system satisfies the acceptance criteria and to enable the user,
customers or other authorized entity to determine whether or not to accept the system. 
[ISTQB Glossary]

	пользовательское приемочное тестирование

	эксплуатационное

	на соответствие контракту


	Операционное приёмочное тестирование (operational acceptancetesting, production acceptance 
	testing) — операционное тестирование, выполняемое с точки зрения выполнения инсталляции, 
	потребления приложением ресурсов, совместимости с программной и аппаратной платформой и т.д.
	Operational acceptance testing, Production acceptance testing. Operational testing in the 
	acceptance test phase, typically performed in a (simulated) operational environment by 
	operations and/or systems administration staff focusing on operational aspects, e.g. 
	recoverability, resource-behavior, installability and technical compliance. 
	[ISTQB Glossary]

	Производственное приёмочное тестирование (factory acceptance testing) — выполняемое проектной 
	командой исследование полноты и качества реализации приложения с точки зрения его готовности 
	к передаче заказчику. Этот вид тестирования часто рассматривается как синоним альфа-тестирования
	Factory acceptance testing. Acceptance testing conducted at the site at which the product is 
	developed and performed by employees of the supplier organization, to determine whether or not 
	a component or system satisfies the requirements, normally including hardware as well as 
	software. [ISTQB Glossary]

	Итоговое приёмочное тестирование (site acceptance testing) — тестирование конечными 
	пользователями (представителями заказчика) приложения в реальных условиях эксплуатации с целью 
	вынесения решения о том, требует ли приложение доработок или может быть принято в эксплуатацию 
	в текущем виде.
	Site acceptance testing. Acceptance testing by users/customers at their site, to determine 
	whether or not a component or system satisfies the user/customer needs and fits within 
	the business processes, normally including hardware as well as software. 
	[ISTQB Glossary]

	Альфа-тестирование (alpha testing) выполняется внутри организации-разработчика 
	с возможным частичным привлечением конечных пользователей. Может являться формой внутреннего 
	приёмочного тестирования. Суть  вкратце: продукт уже можно периодически показывать внешним 
	пользователям, но он ещё достаточно «сырой», потому основное тестирование выполняется 
	организацией-разработчиком.
	 Alpha testing. Simulated or actual operational testing by potential users/customers or an 
	independent test team at the developers’site, but outside the development organization. 
	Alpha testing is often employed for off-the-shelf software as a form of internal acceptance 
	testing. [ISTQB Glossary]

	Бета-тестирование (beta testing) выполняется вне организации-разработчика с активным 
	привлечением конечных пользователей/заказчиков. Может являться формой внешнего приёмочного 
	тестирования. Суть вкратце: продукт уже можно открыто показывать внешним пользователям, он 
	уже достаточно стабилен, но проблемы всё ещё могут быть, и для их выявления нужна обратная 
	связь от реальных пользователей.
	Beta testing. Operational testing by potential and/or existing users/customers at an external 
	site not otherwise involved with the developers, to determine whether or not a component or 
	system satisfies the user/customer needs and fits within the business processes. 
	Beta testing is often employed as a form of external acceptance testing for off-the-shelf 
	software in order to acquire feedback from the market. [ISTQB Glossary]

	Гамма-тестирование (gamma testing) — финальная стадия тестирования перед выпуском продукта, 
	направленная на исправление незначительных дефектов, обнаруженных в бета-тестировании. 
	Как правило, также выполняется с максимальным привлечением конечных пользователей/заказчиков. 
	Может являться формой внешнего приёмочного тестирования. Суть вкратце: продукт уже почти готов, 
	и сейчас обратная связь от реальных пользователей используется для устранения 
	последних недоработок				
				







Позитивные проверки — это проверки с данными, введения которых продукт ожидает от пользователя. Например, ожидает от нас система положительного числа в поле цена, мы вводим 100 руб. Негативные проверки — это, соответственно, те данные, которых программа не ждет.






Исследовательское тестирование (exploratory testing)				
это одновременное изучение системы, проектирование тестов (тест дизайн) и непосредственно тестирование.				
Данная техника базируется на опыте тестировщика (experience based).				
Пример: приходит тестировщик на новый проект и начинает одновременно изучать сайт, писать чек-лист и проходить этот чек-лист (тестировать).				
				
исследовательское(на основе чек листов)(exploratory testing) — частично формализованный подход,				
в рамках которого тестировщик выполняет работу с приложением по выбранному сценарию, который,				
в свою очередь, дорабатывается в процессе выполнения с целью более полного исследования приложения.				
Ключевым фактором успеха при выполнении исследовательского тестирования является именно работа по				
сценарию, а не выполнение разрозненных бездумных операций. Существует даже специальный сценарный подход,				
называемый сессионным тестированием (session-based test￾ing). В качестве альтернативы сценариям при				
выборе действий с приложением иногда могут использоваться чек-листы, и тогда этот вид тестирования				
называют тестированием на основе чек-листов (checklist-based testing)				
Exploratory testing. An informal test design technique where the tester actively controls the design of the tests as those tests				
are performed and uses information gained while testing to design new and better tests.				
[ISTQB Glossary]				
Session-based Testing. An approach to testing in which test activities are planned as uninterrupted				
sessions of test design and execution, often used in conjunction with exploratory testing.				
[ISTQB Glossary]				
Checklist-based Testing. An experience-based test design technique whereby the experienced tester				
uses a high-level list of items to be noted, checked, or remembered, or a set of rules or criteria				
against which a product has to be verified.				
[ISTQB Glossary]				
				
				
				
Ad-hoc тестирование				
Перевод от автора статьи - “тестирование от балды”.				
Вид тестирования, который выполняется без подготовки к тестам, без определения ожидаемых результатов, без проектирования тестовых сценариев.				
Неформальное, импровизационное тестирование.				
				
интуитивное (ad hoc testing) — полностью неформализованный подход, в котором не предполагается				
использования ни тест-кейсов, ни чек-листов, ни сценариев — тестировщик полностью опирается на свой				
профессионализм и интуицию (experience-based testing) для спонтанного выполнения с приложением действий,				
которые, как он считает, могут обнаружить ошибку. Этот вид тестирования используется редко и				
исключительно как дополнение к полностью или частично формализованному тестированию в случаях,				
когда для исследования некоторого аспекта поведения приложения (пока?) нет тест-кейсов				
Ad hoc testing. Testing carried out informally; no formal test preparation takes place, no recognized				
test design technique is used, there are no expectations for results and arbitrariness guides the				
test execution activity. [ISTQB Glossary]			




SMOKE — (smoke test, intake test, build verification test) 
направлено на проверку самой главной, самой важной, самой ключевой функциональности, 
неработоспособность которой делает бессмысленной саму идею использования приложения 
(или иного объекта, подвергаемого дымовому тестированию).
когда для проверки основной функции можно использовать несколько путей для ее достижения
проверяют все эти пути, в этом случае получается smoke extended(расширенный)

тест критического пути (critical path test) направлено на исследование функциональности, 
используемой типичными пользователями в типичной повседневной деятельности, проводится 
после дымного тестирования. Пороговое значение метрики успешного прохождения 
«теста критического пути» уже немного ниже, чем в дымовом тестировании, но всё равно достаточно высоко
(как правило, порядка 70–80–90 % — в зависимости от сути проекта).

расширенный тест - (extended test) направлено на исследование всей заявленной в требованиях 
функциональности — даже той, которая низко проранжирована по степени важности. Но при наличии 
достаточного количества времени и иных ресурсов тест-кейсы этого уровня могут затронуть даже 
самые низкоприоритетные требования. Пороговое значение метрики успешного прохождения расширен-
ного тестирования (иногда можно увидеть даже значения в диапазоне 30–50 %, т.к. подавляющее 
большинство найденных здесь дефектов не представляет угрозы для успешного использования 
приложения большинством пользователей)




Дымовые тесты: выполняются каждый раз, когда мы получаем новый билд (версию), проекта (системы) на тестирование, при этом считая её относительно нестабильной. Нам нужно убедиться что критически важные функции AUT (Application Under Test) работают согласно ожиданиям. Идея данного вида тестирования заключается в том, чтобы выявить серьёзные проблемы как можно раньше, и отклонить этот билд (вернуть на доработку) на раннем этапе тестирования, чтобы не углубляться в долгие и сложные тесты, не затрачивая тем самым время на заведомо бракованное ПО.
Санитарное тестирование: используется каждый раз, когда мы получаем относительно стабильный билд ПО, чтобы определить работоспособность в деталях. Иными словами, здесь проходит валидация того, что важные части функциональности системы работают согласно требованиям на низком уровне.

Оба эти вида тестирования нацелены на то, чтобы избежать потерь времени и усилий, чтобы быстрее определить недостатки ПО и их критичность, а так же то, заслуживает ли оно перехода в фазу более углублённого и тщательного тестирования или же нет.

Ре-тест: проводится в случае, если фича/функциональность уже имела дефекты, и эти дефекты были недавно исправлены
Регрессионные тесты: собственно то, что занимает львиную долю времени и для чего существует автоматизация тестирования. Проводится регрессионное тестирование AUT тогда, когда нужно убедиться что новые (добавленные) функции приложения / исправленные дефекты не оказали влияния на текущую, уже существующую функциональность, работавшую (и протестированную) ранее.





Тестирование нового функционала – процесс проверки нового, добавляемого функционала ПО на соответствие предъявляемым к нему требованиям.

Полуавтоматизированное тестирование - это ручное тестирование с частичным использованием средств автоматизации (например автоматизация развертки окружения, автоматизация подготовки предусловий и т.





Тестовый сценарий (Test scenario) - последовательность действий над продуктом, которые связаны единым ограниченным бизнес-процессом использования, и сообразных им проверок корректности поведения продукта в ходе этих действий. Иными словами, это последовательность шагов, которые пользователь может предпринять, чтобы использовать ваше программное обеспечение. Сценарии тестирования должны учитывать все возможные способы выполнения задачи (функции) и охватывать как положительные, так и отрицательные тестовые примеры, потому что конечные пользователи могут не обязательно предпринимать шаги, которые вы от них ожидаете. Используя тестовые сценарии, мы оцениваем работу приложения с точки зрения конечного пользователя. Фактически при успешном прохождении всего тестового сценария мы можем сделать заключение о том, что продукт может выполнять ту или иную возложенную на него функцию.
Как писать сценарии:
Тщательно ознакомьтесь с требованиями (Спецификация бизнес-требований (BRS), Спецификация требований к программному обеспечению (SRS), Спецификация функциональных требований (FRS)) тестируемой системы (SUT), use cases, книгами, руководствами и т. д.;
Для каждого требования выясните, как пользователь может использовать программное обеспечение всеми возможными способами;
Составьте список сценариев тестирования для каждой функции тестируемого приложения (AUT);





Фронтенд — все, что браузер может читать, выводить на экран и / или запускать. То есть это HTML, CSS и JavaScript.

Бэкенд — все, что работает на сервере, то есть «не в браузере» или «на компьютере, подсоединенном к сети (обычно к Интернету), который отвечает на сообщения от других компьютеров».




Тестирование безопасности (Security and Access Control testing)

Это тип тестирования ПО, который выявляет уязвимости, угрозы и риски. Целью тестов безопасности является выявление всех возможных лазеек и слабых мест в ПО, которые могут привести к потере информации, доходов, репутации компании, сотрудников или клиентов. Общая стратегия безопасности основывается на трех основных принципах:
Конфиденциальность - сокрытие определенных ресурсов или информации;
Целостность - ресурс может быть изменен только в соответствии с полномочиями пользователя;
Доступность - ресурсы должны быть доступны только авторизованному пользователю, внутреннему объекту или устройству;






Тестирование на отказ и восстановление (Failover and Recovery testing, Disaster Recovery Testing) - подвид тестирования производительности, проверяет тестируемый продукт с точки зрения способности противостоять и успешно восстанавливаться после возможных сбоев, возникших в связи с ошибками ПО, отказами оборудования или проблемами связи/сети. Failover - проверка систем восстановления (или дублирующих основной функционал систем), которые, в случае возникновения сбоев, обеспечат сохранность и целостность данных тестируемого продукта. Методика подобного тестирования заключается в симулировании различных условий сбоя, последующем изучении и оценке реакции защитных систем. 




тестирование эффективности использования ресурсов — это процесс проверки программного обеспечения на предмет того, как оно использует системные ресурсы, такие как процессор, память, дисковое пространство и сетевую пропускную способность.




Тестирование масштабируемости проводится для определения способности приложения масштабироваться с точки зрения пользовательской нагрузки, количества транзакций, объема данных и т. д. Цель теста масштабируемости отличается от стрессового или нагрузочного тестирования. Например, компания ожидает шестикратного увеличения нагрузки на серверы в течение следующих двух месяцев. Им может потребоваться увеличить производительность сервера и сократить время обработки запроса, чтобы лучше обслуживать посетителей. Если приложение масштабируемое, вы можете сократить это время, обновив оборудование сервера, например, вы можете увеличить частоту ЦП и добавить больше ОЗУ. 




Тестирование производительности - это нефункциональный вид тестирования программного обеспечения, используемый для проверки скорости, времени отклика, стабильности, надежности, масштабируемости и использования ресурсов программного приложения при определенной рабочей нагрузке, обычно регрессионным образом, когда в приложение ежедневно или еженедельно вносятся небольшие изменения. 



Тестирование стабильности или надежности (Stability / Reliability Testing) — один из видов нефункционального тестирования ПО, целью которого является проверка работоспособности приложения при длительном тестировании с ожидаемым уровнем нагрузки.

Надежность (Reliability) - это «вероятность безотказной работы программного обеспечения в течение определенного периода времени в определенной среде», т.е. это результат, к которому стремятся разработчики, способом достижения которого является устойчивость. Тестирование надежности связано с качеством программного обеспечения и стандартизацией продуктов. Если мы можем повторять тест-кейсы и постоянно получать один и тот же результат, то продукт считается «надежным».


Тестирование практичности (usability testing): Тестирование с целью определения степени понятности, легкости в изучении и использовании, привлекательности программного продукта для пользователя при условии использования в заданных условиях эксплуатации (ISO 9126)
Тестирование удобства пользования - это нефункциональный вид тестирования программного обеспечения, являющийся подмножеством тестирования пользовательского опыта - UX, “Ю-Экс”, user experience. В целом оно подразделяется на понятность, обучаемость, работоспособность, привлекательность и соответствие (understandability, learnability, operability, attractiveness, and compliance). Юзабилити-тестирование предназначено для определения того, насколько программный продукт понятен, легок в освоении, прост в эксплуатации и привлекателен для пользователей при определенных условиях и требованиях. Этот тип тестирования обычно выполняется реальными пользователями.




Локализация ПО (Localization (L10N)) - деятельность по модификации ПО в соответствии с определенными региональными настройками (языком, географической территорией, культурными особенностями). В данный вид проверки входит необходимость выполнения работ по переводу всего контента программного обеспечения для конечного пользователя. Во время перевода должны учитываться иконки, информационная графика, справочные материалы, техническая документация и иные культурные особенности регионов (например, онлайн-сервис по заказу бургеров не будет показывать корову на главной странице в Индии или свинью в мусульманских странах)


Тестирование совместимости (compatibility testing): Тип тестирования, который измеряет степень того, насколько удовлетворительно элемент тестирования может функционировать параллельно с другими независимыми продуктами в общей среде (сосуществование) и, по мере необходимости, обменивается информацией с другими системами или компонентами (функциональная совместимость). (ГОСТ 56920)
Совместимость (Compatibility, Coexistence) - это метод, с помощью которого проверяется совместимость 2 или более приложений в одной среде. MS Word и Калькулятор - это два разных приложения, и они показывают ожидаемое поведение независимо в одной и той же операционной системе. Итак, мы говорим, что эти 2 приложения совместимы друг с другом. Другой пример: если сайт Google.com совместим, он должен открываться во всех браузерах и операционных системах. Тестирование совместимости - это нефункциональное тестирование для обеспечения удовлетворенности клиентов. Оно предназначено для определения того, может ли программное обеспечение или продукт работать в различных браузерах, базах данных, оборудовании, операционной системе, мобильных устройствах и сетях. На приложение также может влиять различные версии, разрешения, скорости интернета, конфигурации и т. д









Тестирование адаптивности помогает убедиться, что ваше приложение или веб-сайт выглядит и функционирует должным образом на различных устройствах и экранах. Это особенно важно сегодня, когда пользователи могут получить доступ к вашему продукту с любого устройства — от смартфонов до настольных компьютеров