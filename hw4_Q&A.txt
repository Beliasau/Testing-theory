Задание 4
Ответить на вопросы:
Что такое Тест дизайн?
Для чего нужны Техники тест дизайна?
Что такое Классы эквивалентности?
Что такое Граничные значения?
Что такое Таблица принятия решений?
Что такое Попарное тестирование?
Перечислите Методы комбинаторного тестирования


=========================================================

Тест дизайн 				
				
"Test design — это процесс проектирования и создания тест кейсов, 
в соответствии с критериями качества и целями тестирования."				
Тест аналитик — определяет «ЧТО тестировать?»				
Тест дизайнер — определяет «КАК тестировать?»				
Реальность — все делает 1 человек :)	


Для чего нужны Техники тест дизайна?
				
задачами тест-дизайна являются:				
Анализ требований и рисков тестирования				
Определение проверок для тестирования				
Формализация проверок в виде тестовых сценариев				
Приоритезация проверок				
Определение подходов к тестированию	



Эквивалентное Разделение (Equivalence Partitioning) (тестирование на основе классов эквивалентности)				
"Как пример, у вас есть диапазон допустимых значений от 1.00 до 10.00 долларов, вы должны выбрать одно любое 
верное значение внутри интервала, скажем, 5.00, и любые неверные значения вне интервала, например 0.99 и 11.00."

Тестирование на основе классов эквивалентности — это техника, при которой мы разделяем функционал				
(часто диапазон возможных вводимых значений) на группы эквивалентных по своему влиянию на				
систему значений.				
относится к Black Box testing				
Такое тестирование больше всего подходит для систем, в которых				
большая часть входных данных принимает значения в пределах диапазонов или из наборов данных. 			
Тестирование классов эквивалентности​ - это техника, используемая для уменьшения числа тестовых				
наборов до выполнимого уровня при сохранении приемлемого уровня покрытия тестами.				
Класс эквивалентности представляет собой набор данных, которые либо одинаково обрабатываются модулем,				
либо их обработка выдает одинаковые результаты. При тестировании любое значение данных,				
входящее в класс эквивалентности, аналогично любому иному значению класса				
● от 0 до 15				
● от 16 до 18​				
● от 19 до 55​				
● от 56 до 99​				
				



Анализ Граничных Значений (Boundary Value Analysis)				
Как пример, у вас есть диапазон допустимых значений от 1.00 до 10.00 долларов.				
Two value (двузначный) BVA: валидные граничные значения 1.00, 10.00, и невалидные значения 0.99 и 10.01.				
Three/Full value (трехзначный) BVA: валидные граничные значения 1.00, 1.01, 10.00, 9.99, и невалидные значения 0.99 и 10.01.				
Техника анализа граничных значений (boundary value testing) —				
это техника проверки поведения продукта на крайних (граничных) значениях входных данных.				
Для использования тестирования граничных значений есть простые шаги.				
1 нужно определить классы эквивалентности.				
2 нужно определить границы каждого класса эквивалентности.				
3 создать тест-кейсы для каждого граничного значения, выбрав одну точку на границе, одну точку чуть ниже границы и одну точку чуть выше границы				
Тестирование граничных значений в равной степени применимо на модульном, интеграционном,				
системном и приемочном уровнях тестирования. Для тестирования граничных значений требуются входные				
значения, которые могут быть разделены на классы и границы, которые могут быть определены на основе				
системных требований				




				
Таблица принятия решений (Decision table)				
Они используются для записи сложных				
бизнес-правил, которые должна реализовывать система. Кроме того, тест-кейсы могут быть созданы				
непосредственно из таблицы решений.
В таблицах решений представлен набор условий, одновременное выполнение которых должно привести к определенному действию/решению.				
техника тестирования, основанная на методе чёрного ящика, которая применяется для систем со сложной				
логикой.Таблицы решений​ являются превосходным инструментом для сбора определенных видов требований				
системы и для документирования внутреннего устройства системы. 
		

пример

			Правило 1 Правило 2 ... Правило p
Условия

Условие-1

Условие-2

...

Условие-m
=======================================================

			        Правило 1 Правило 2 Правило 3 Правило 4
Условия

Состоит в браке?	 Да 	     Да        Нет  	Нет
Хороший студент? 	 Да 	     Нет 	    Да  	Нет

Действия

Скидка ($) 		    60 	          25 	    50 	     0
				
При тестировании для каждого правила создаётся как минимум один тест-кейс. Если состояния этого				
правила бинарные, то должно быть достаточно одного теста для каждого сочетания. С другой стороны,				
если состояние является диапазоном значений, то тестирование должно учитывать и нижнюю, и высшую				
границы диапазона. Таким образом мы объединяем идею тестирования граничных значений с				
тестированием таблиц решений				
Тестирование таблиц решений может использоваться всякий раз, когда система должна реализовывать				
сложные бизнес-правила.	



Попарное тестирование (Pairwise Testing)				
"Формирование таких наборов тестовых данных, в которых каждое тестируемое значение каждого из проверяемых 
параметров хотя бы единожды сочетается с каждым тестируемым значением всех остальных проверяемых параметров."				
Звучит сложно, но на практике использовать эту технику очень просто и логично.				
Суть техники — мы не проверяем все сочетания всех значений, но проверяем ВСЕ ПАРЫ значений.				
				
Попарное тестирование (pairwise testing)				
используется при большом количестве входящих даных				
например сайт должен работать при помощи:				
○ 8 браузеров				
○ 3 плагина				
○ 6 клиентских операционных систем				
○ 3 сервера				
○ 3 серверных операционных системы				
○ 1296 комбинаций				
это техника формирования наборов тестовых данных из полного набора входных данных в системе,				
которая позволяет существенно сократить количество тест-кейсов.				
Одни из гипотез заключается в том-				
1 Дефекты проявляются чаще при сочетании двух параметров, чем трех  и более.				
2 Каждый конкретный тестовый случай может проверить более одной уникальной пары.	

большинство дефектов являются
либо одиночными (тестируемая функция просто не работает и любой тест на эту функцию найдет дефект),
либо двойными (это пара из функции/модуля, с которыми функция/модуль проваливаются, хотя все
остальные пары выполняются успешно). Попарное тестирование определяет минимальный набор, который
поможет нам проверить все одиночные и попарные дефекты. 

				
Попарное тестирование определяет минимальный набор, который				
поможет нам проверить все одиночные и попарные дефекты				
Использование всех пар для создания тест-кейсов основывается на двух техниках				
1 ортогональных массивах​				
2 алгоритме Allpairs.(генерирует пары непосредственно, не прибегая к таким «внешним»				
устройствам, как ортогональный массив.(http://www.satisfice.com	https://pairwise.teremokgames.com/))			
Ортогональный массив - это двумерный массив, с таким интересным свойством - выберите любые				
два столбца в массиве. В каждой паре столбцов будут встречаться все комбинации значений этих				
столбцов, но и, если любая пара встречается в массиве несколько раз, то все остальные пары будут				
встречаться такое же число раз	


	1   2   3

1	1   1   1
2	1   2   2
3	2   1   2
4	2   2   1
			
Использование ортогональных массивов				
1. Определите переменные​.				
2. Определите количество значений, которое может принимать каждая переменная​.				
3. Определите ортогональный массив, у которого будет столбец для каждой переменной				
(каждый столбец ортогонального массива имеет столько же вариантов значений, сколько имеет				
ваша переменная).				
4. Спроецируйте задачу тестирования на ортогональный массив.​				
5. Постройте тест-кейсы				
существуют определенные  ортогональные массивы (это справочная информация)				
нужно подобрать ближайший, чуть больший, подходящий массив!				
что делать с лишними столбцами и строками в массиве???				
1 лишние столбцы нужно удалить.				
2 в строках- замените лишние клетки на любые допустимые значения для переменной		



Комбинаторное тестирование — это метод тестирования программного обеспечения, который позволяет эффективно обнаруживать ошибки, связанные со взаимодействием параметров. Самый популярный вариант — попарное тестирование (pairwise).

 Pairwise основан на принципе, который гласит, что 98% всех ошибок возникают в результате влияния одного или двух параметров. Попарное тестирование позволяет исследовать все возможные комбинации значений для каждой пары параметров, что обеспечивает более широкое покрытие тестирования, чем тестирование каждого параметра в отдельности.